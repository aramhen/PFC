-- MySQL Script generated by MySQL Workbench
-- 05/29/15 10:49:39
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema pfcdb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `pfcdb` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `pfcdb` ;

-- -----------------------------------------------------
-- Table `pfcdb`.`methods`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pfcdb`.`methods` (
  `idMethods` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key autoincremental for Methods',
  `name` VARCHAR(45) NOT NULL COMMENT 'Name of the method',
  PRIMARY KEY (`idMethods`)  COMMENT 'Primary Key',
  UNIQUE INDEX `UK_methodName_idx` (`name` ASC)  COMMENT 'The name of the method must be unique')
COMMENT = 'Table with the methods available to solve the problems';


-- -----------------------------------------------------
-- Table `pfcdb`.`teachers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pfcdb`.`teachers` (
  `idTeachers` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key autoincremental for Teachers',
  `email` VARCHAR(50) NOT NULL COMMENT 'Email of the teacher',
  `name` VARCHAR(100) NULL COMMENT 'Name of the teacher',
  `numDoc` VARCHAR(12) NOT NULL COMMENT 'Document number of the teacher. It is unique to prevent inserting the same teacher more than once',
  `password` VARCHAR(40) NULL COMMENT 'Password of the teacher encrypted in SHA1',
  PRIMARY KEY (`idTeachers`)  COMMENT 'Primary Key',
  UNIQUE INDEX `UK_email_idx` (`email` ASC)  COMMENT 'The email of the teachers must be unique',
  UNIQUE INDEX `UK_numDoc_idx` (`numDoc` ASC)  COMMENT 'The document number of the teachers must be unique')
ENGINE = InnoDB
COMMENT = 'Table with the teachers who can create problems';


-- -----------------------------------------------------
-- Table `pfcdb`.`problems`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pfcdb`.`problems` (
  `idProblems` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key autoincremental for Problems',
  `teacher` INT NOT NULL COMMENT 'Foreing Key that references the teacher who created the problem',
  `title` VARCHAR(45) NOT NULL,
  `method` INT NOT NULL COMMENT 'Method which must be used to solve the problem',
  `numVariables` INT(1) NOT NULL COMMENT 'Number of variables of the problem',
  `equations` VARCHAR(90) NOT NULL COMMENT 'Number of ecuations of the problem',
  `initDate` DATE NULL COMMENT 'Students can begin to solve the problem from this date',
  `endDate` DATE NULL COMMENT 'Students can solve the problem until this date',
  `uniqueAnswer` TINYINT(1) NULL,
  `solution` VARCHAR(45) NULL COMMENT 'The teacher can include the solution of the problem for future checks',
  PRIMARY KEY (`idProblems`)  COMMENT 'Primary Key',
  INDEX `FK_Methods_idx` (`method` ASC)  COMMENT 'Index for FK that references in column method to table Methods column idMethods',
  INDEX `FK_Teachers_idx` (`teacher` ASC)  COMMENT 'Index for FK that references in column teacher to table Teachers column idTeachers',
  CONSTRAINT `FK_Methods`
    FOREIGN KEY (`method`)
    REFERENCES `pfcdb`.`methods` (`idMethods`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Teachers`
    FOREIGN KEY (`teacher`)
    REFERENCES `pfcdb`.`teachers` (`idTeachers`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table with the problems created by teachers that students will resolve';


-- -----------------------------------------------------
-- Table `pfcdb`.`students`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pfcdb`.`students` (
  `idStudents` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key autoincremental for Students',
  `email` VARCHAR(50) NOT NULL COMMENT 'Email of the student',
  `name` VARCHAR(100) NOT NULL COMMENT 'Name of the student',
  `numDoc` VARCHAR(12) NOT NULL COMMENT 'Document number of the student. It is unique to prevent inserting the same student more than once',
  `password` VARCHAR(40) NULL COMMENT 'Password of the student encrypted in SHA1',
  PRIMARY KEY (`idStudents`)  COMMENT 'Primary Key',
  UNIQUE INDEX `UK_email_idx` (`email` ASC)  COMMENT 'The email of the students must be unique',
  UNIQUE INDEX `UK_numDoc_idx` (`numDoc` ASC)  COMMENT 'The document number of the students must be unique')
ENGINE = InnoDB
COMMENT = 'Table with the students who can solve problems';


-- -----------------------------------------------------
-- Table `pfcdb`.`answers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `pfcdb`.`answers` (
  `idAnswers` INT NOT NULL AUTO_INCREMENT COMMENT 'Primary Key autoincremental for Answers',
  `problem` INT NOT NULL COMMENT 'Problem which is being answered',
  `student` INT NOT NULL COMMENT 'Student who insert the answer',
  `answerDate` DATETIME NOT NULL COMMENT 'Date when the answer has been inserted',
  `solution` VARCHAR(45) NOT NULL COMMENT 'Solution of the problem inserted by the student',
  `steps` LONGTEXT NOT NULL COMMENT 'Steps used by the students to get the solution',
  PRIMARY KEY (`idAnswers`)  COMMENT 'Primary Key',
  INDEX `FK_Students_idx` (`student` ASC)  COMMENT 'Index for FK that references in column student to table Students column idStudents',
  INDEX `FK_Problems_idx` (`problem` ASC)  COMMENT 'Index for FK that references in column problem to table Problems column idProblems',
  CONSTRAINT `FK_Students`
    FOREIGN KEY (`student`)
    REFERENCES `pfcdb`.`students` (`idStudents`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `FK_Problems`
    FOREIGN KEY (`problem`)
    REFERENCES `pfcdb`.`problems` (`idProblems`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Table with the answers of the students to the problems';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `pfcdb`;

DELIMITER $$
USE `pfcdb`$$
CREATE TRIGGER `check_uniqueAnswer` BEFORE INSERT ON `answers` FOR EACH ROW
BEGIN
    DECLARE msg VARCHAR(255);
	DECLARE uniqueAns INT;
	DECLARE previousAns INT;
	SELECT COUNT(1) INTO previousAns FROM answers a
	WHERE NEW.problem = a.problem AND NEW.student = a.student;
	SELECT uniqueAnswer INTO uniqueAns FROM problems p
	WHERE NEW.problem = p.idProblems;
    IF (uniqueAns = 1 AND previousAns >0) THEN
        set msg = "This problem can only been answered one time";
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = msg;
    END IF;
END$$


DELIMITER ;
